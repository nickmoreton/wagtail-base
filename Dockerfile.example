FROM python:3.8.5-buster

# Add user that will be used in the container.
RUN useradd wagtailcms

# Port used by this container to serve HTTP.
EXPOSE 8000

# Set environment variables.
# 1. Force Python stdout and stderr streams to be unbuffered.
# 2. Set PORT variable that is used by Gunicorn. This should match "EXPOSE"
#    command.
ENV PYTHONUNBUFFERED=1 \
    PORT=8000
    
# Install system packages required by Wagtail and Django.
RUN apt-get update --yes --quiet && apt-get install --yes --quiet --no-install-recommends \
    build-essential \
    libpq-dev \
    libmariadbclient-dev \
    libjpeg62-turbo-dev \
    zlib1g-dev \
    libwebp-dev \
 && rm -rf /var/lib/apt/lists/*

# Install your app's Python requirements using poetry
COPY --chown=wagtailcms pyproject.toml poetry.lock ./
RUN pip install poetry
RUN poetry config virtualenvs.create false
RUN poetry install --no-dev
# "gunicorn==20.0.4" could be needed in the initial poetry install earlier
# in fact set them up before running the container

# Use /app folder as a directory where the source code is stored.
WORKDIR /app

# Use user "wagtailcms" to run the build commands below and the server itself.
USER wagtailcms

# Copy the source code of the project into the container.
COPY --chown=wagtailcms:wagtailcms . .

# Collect static files.
RUN python manage.py collectstatic --noinput --clear

# Runtime command that executes when "docker run" is called.
# The database should be migrated manually or using the release
# phase facilities of your hosting platform. This is used only so the
# Wagtail instance can be started with a simple "docker run" command.
CMD gunicorn wagtailcms.wsgi:application
